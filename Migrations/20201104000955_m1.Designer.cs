// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    [Migration("20201104000955_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApplication1.Models.Apuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cuota")
                        .HasColumnType("int");

                    b.Property<double>("DineroApostado")
                        .HasColumnType("double");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Mercado_id")
                        .HasColumnType("int");

                    b.Property<string>("TipoApuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Apuesta");
                });

            modelBuilder.Entity("WebApplication1.Models.Cuenta", b =>
                {
                    b.Property<int>("CuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreBanco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<string>("TarjetaCredito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CuentaId");

                    b.ToTable("Cuenta");

                    b.HasData(
                        new
                        {
                            CuentaId = 1,
                            NombreBanco = "Bankia",
                            Saldo = 25,
                            TarjetaCredito = "2354687"
                        },
                        new
                        {
                            CuentaId = 2,
                            NombreBanco = "Bankia",
                            Saldo = 24,
                            TarjetaCredito = "2352687"
                        },
                        new
                        {
                            CuentaId = 3,
                            NombreBanco = "Bankia",
                            Saldo = 22,
                            TarjetaCredito = "2354887"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Eventos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EquipoLocal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EquipoVisitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Fecha")
                        .HasColumnType("int");

                    b.Property<int>("Goles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("WebApplication1.Models.Mercado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("CuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("DineroOver")
                        .HasColumnType("double");

                    b.Property<double>("DineroUnder")
                        .HasColumnType("double");

                    b.Property<int>("IdEvento")
                        .HasColumnType("int");

                    b.Property<double>("UnderOver")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Mercado");
                });

            modelBuilder.Entity("WebApplication1.Models.Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Email");

                    b.HasIndex("CuentaId")
                        .IsUnique();

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Email = "manolito@gmail.com",
                            Apellido = "manolo",
                            CuentaId = 1,
                            Edad = 30,
                            Nombre = "ok"
                        },
                        new
                        {
                            Email = "Carlos@gmail.com",
                            Apellido = "Carlos",
                            CuentaId = 2,
                            Edad = 24,
                            Nombre = "vale"
                        },
                        new
                        {
                            Email = "pepe@gmail.com",
                            Apellido = "pepe",
                            CuentaId = 3,
                            Edad = 25,
                            Nombre = "si"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Usuario", b =>
                {
                    b.HasOne("WebApplication1.Models.Cuenta", "Cuenta")
                        .WithOne("Usuario")
                        .HasForeignKey("WebApplication1.Models.Usuario", "CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
